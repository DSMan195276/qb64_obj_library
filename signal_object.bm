
'Future imprivements -- Hash the signals for faster look-up

!!include once

'@@
'@File   signal_trait_object.bm
'@author DSMan195276
'@date   May 6th, 2013
'
'Functionality for the Signals system.
'
'@@@

'@@
'@Object
'@Private
'@Brief Represents a single signal and it's connections in a list of signals
'
'@@@
TYPE OBJ_signal_trait_node 
  signal_name       AS _OFFSET
  id                AS _UNSIGNED LONG
  first_connection  AS _OFFSET
  next_signal       AS _OFFSET
END TYPE 

'@@
'@Object
'@Private
'@Brief Represents a single connection to a signal in a chain of connections
'
'@@@
TYPE OBJ_signal_trait_connection_node 
  notify_proc AS @PROC
  id as _UNSIGNED LONG
  dat AS _OFFSET
  next_connection AS _OFFSET 'GUI_signal_trait_connection
END TYPE 

FUNCTION OBJ_signal_trait_get_type& () 
STATIC added
DIM t as OBJ_type_info
IF added = 0 then
  t.class_size = LEN(OBJ_signal_trait_class, TYPE)
  t.base_size = LEN(OBJ_signal_trait, TYPE)
  t.init = @SUB(OBJ_signal_trait_init)
  t.class_init = @SUB(OBJ_signal_trait_init_class)
  t.destroy = @SUB(OBJ_signal_trait_destroy)
  t.flags = OBJ_TYPE_INFO_FLAG_TRAIT
  added = OBJ_type_register_type&(t)
end if
OBJ_signal_trait_get_type& = added
END FUNCTION 

'@@
'@Brief Initalizes a OBJ_signal Object and assigns starting signal and connection ID numbers
'
'@param[in] _OFFSET to the OBJ_signal object to initalize 
'@@@
SUB OBJ_signal_trait_init (this as _OFFSET) 
'@(this, OBJ_Signal.next_connection_id) = 1 AS LONG
'@(this, OBJ_Signal.next_signal_trait_id) = 1 AS LONG
END SUB 

SUB OBJ_signal_trait_init_class (class as _OFFSET) 
@(class, OBJ_signal_trait_class.disconnect_signal) = @SUB(OBJ_signal_trait_private_disconnect_signal)
@(class, OBJ_signal_trait_class.disconnect_connection) = @SUB(OBJ_signal_trait_private_disconnect_con)
@(class, OBJ_signal_trait_class.get_signal_id) = @FUNCTION(OBJ_signal_trait_private_get_signal_id&)
@(class, OBJ_signal_trait_class.connect_to_signal) = @FUNCTION(OBJ_signal_trait_private_connect_to_signal&)
@(class, OBJ_signal_trait_class.connect_to_signal_with_id) = @FUNCTION(OBJ_signal_trait_private_connect_to_s_w_i&)
@(class, OBJ_signal_trait_class.add_new_signal) = @FUNCTION(OBJ_signal_trait_private_add_new_signal&)
@(class, OBJ_signal_trait_class.emit) = @SUB(OBJ_signal_trait_private_emit)
END SUB 

'@@
'@Brief Clears a OBJ_signal object and prepares it to be deleted
'
'It calls OBJ_signal_trait_clear_signals to detach any signals and connections and then
'calls OBJ_ref_object's clear procedure
'
'@param[in] _OFFSET to the OBJ_signal object to clear
'@@@
SUB OBJ_signal_trait_destroy (this as _OFFSET) 
OBJ_signal_trait_private_clear_signals this
END SUB 

FUNCTION OBJ_IS_SIGNAL_TRAIT& (this as _OFFSET)
  OBJ_IS_SIGNAL_TRAIT& = OBJ_is_instance_of&(this, OBJ_signal_trait_get_type&)
END FUNCTION

FUNCTION OBJ_SIGNAL_TRAIT_CAST%& (this as _OFFSET)
  OBJ_SIGNAL_TRAIT_CAST%& = OBJ_Object_cast_as_type%&(this, OBJ_signal_trait_get_type&)
END FUNCTION

SUB OBJ_signal_trait_private_clear_signals (this as _OFFSET) 

END SUB 

SUB OBJ_signal_trait_private_disconnect_signal (this as _OFFSET, id as _UNSIGNED LONG) 

END SUB 

SUB OBJ_signal_trait_private_disconnect_con (this as _OFFSET, id as _UNSIGNED LONG) 

END SUB 

FUNCTION OBJ_signal_trait_private_get_signal_id& (this as _OFFSET, n AS _OFFSET) 
$CHECKING:OFF
DIM sig as _OFFSET, st AS STRING
n = OBJ_ref_Object_get_ref(n)
st = OBJ_T_get$(n)
sig = @(this, OBJ_Signal_trait.first_signal)
DO WHILE sig <> 0
  if OBJ_T_get$( @(sig, OBJ_Signal_trait_node.signal_name) ) = st then
    OBJ_signal_trait_private_get_signal_id& = @(sig, OBJ_Signal_trait_node.id)
    goto clear_refs
  end if
  sig = @(sig, OBJ_Signal_trait_node.next_signal)
LOOP

clear_refs:
OBJ_ref_Object_release_ref n
$CHECKING:ON
END FUNCTION 

'@@
'
'@Brief Connects a procedure and data pointer to a signal on this object
'
'It loops through the linked-list of signals in the OBJ_signal object until it
'finds the signal with the correct name. From there it calls
'OBJ_signal_trait_attach_to_signal to create the connection to the signal and returns
'the result of the call to OBJ_signal_trait_attach_to_signal --> This is the ID of the
'connection to the OBJ_signal object.
'
'@Param[in] Object of type 'OBJ_Signal', the object you want to connect to
'@Param[in] Name of the signal to connect to
'@Param[in] To procedure to run when signal is emitted
'@Param[in] _OFFSET to pass when pro is called along with the object who emitted
'           the signal. Can be OBJ_NULL if not used by pro
'
'@Return 0 if unable to make a connection (The signal wasn't found) otherwise
'        returns the ID number of the connection to this object
'@@@
FUNCTION OBJ_signal_trait_private_connect_to_signal& (this as _OFFSET, n AS _OFFSET, pro as @PROC, dat as _OFFSET) 
$CHECKING:OFF
DIM sig as _OFFSET, st as STRING
n = OBJ_ref_Object_get_ref(n)
st = OBJ_T_get$(n)
sig = @(this, OBJ_Signal.first_signal)
DO while sig <> 0
  if OBJ_T_get$( @(sig, OBJ_signal_trait_node.signal_name) ) = st then
    OBJ_signal_trait_private_connect& = OBJ_signal_trait_private_attach_to_signal&(this, sig, pro, dat)
    goto clear_refs
  end if
  sig = @(sig, OBJ_signal_trait_node.next_signal)
loop

clear_refs:
OBJ_ref_Object_release_ref n
$CHECKING:ON
END FUNCTION 

FUNCTION OBJ_signal_trait_private_connect_to_s_w_i& (this as _OFFSET, id as _UNSIGNED LONG, pro as @PROC, dat as _OFFSET) 
$CHECKING:OFF
DIM sig as _OFFSET, m as MEM_string
sig = @(this, OBJ_Signal.first_signal)
DO while sig <> 0
  if @(sig, OBJ_signal_trait_node.id, LONG) = id then
    OBJ_signal_trait_private_connect_to_s_w_i& = OBJ_signal_trait_private_attach_to_signal&(this, sig, pro, dat)
    exit function
  end if
  sig = @(sig, OBJ_signal_trait_node.next_signal)
loop
$CHECKING:ON
END FUNCTION 

'@@
'@Private
'@Brief Creates a new OBJ_signal_trait_connection_node, initalizes it, and attaches it to 'sig'
'
'Allocates memory for a new OBJ_signal_trait_connection_node and assigns it its @PROC (pro),
'data _OFFSET (dat), and ID number. It then 
'
'@@@
FUNCTION OBJ_signal_trait_private_attach_to_signal& (this as _OFFSET, sig as _OFFSET, pro as @PROC, dat as _OFFSET) 
$CHECKING:OFF
DIM new_connect AS _OFFSET
new_connect = MEM_MALLOC%&(LEN(OBJ_signal_trait_connection_node, TYPE))
@(new_connect, OBJ_signal_trait_connection_node.notify_proc) = pro
@(new_connect, OBJ_signal_trait_connection_node.id) = @(this, OBJ_Signal.next_connection_id)
@(new_connect, OBJ_signal_trait_connection_node.dat) = dat
@(new_connect, OBJ_signal_trait_connection_node.next_connection) = @(sig, OBJ_signal_trait_node.first_connection)
@(sig, OBJ_signal_trait_node.first_connection) = new_connect
@(this, OBJ_Signal.next_connection_id) = @(this, OBJ_Signal.next_connection_id) + 1
OBJ_Signal_private_attach_to_signal& = @(new_connect, OBJ_signal_trait_connection_node.id)
$CHECKING:ON
END FUNCTION 

FUNCTION OBJ_signal_trait_private_add_new_signal& (this as _OFFSET, n AS _OFFSET) 
DIM sig as _OFFSET, last as _OFFSET
n = OBJ_ref_Object_get_ref(n)
sig = MEM_MALLOC%&(LEN(OBJ_signal, TYPE))
@(sig, OBJ_signal_trait_node.signal_trait_name) = OBJ_ref_Object_get_ref(n)
@(sig, OBJ_signal_trait_node.first_connection) = 0
@(this, OBJ_Signal.next_signal_trait_id) = @(this, OBJ_Signal.next_signal_trait_id) + 1
@(sig, OBJ_signal_trait_node.id) = @(this, OBJ_Signal.next_signal_trait_id)
@(sig, OBJ_signal_trait_node.next_signal) = @(this, OBJ_Signal.first_signal) 
@(this, OBJ_signal.first_signal) = sig
OBJ_signal_trait_private_add_new_signal& = @(sig, OBJ_signal_trait_node.id)
OBJ_ref_Object_release_ref n
END FUNCTION 

SUB OBJ_signal_trait_private_emit (this as _OFFSET, n AS _OFFSET)
$CHECKING:OFF
DIM of as _OFFSET, st AS STRING
DIM off2 AS _OFFSET, pro as @PROC
n = OBJ_ref_Object_get_ref(n)
st = OBJ_T_get$(n)
of = @(this, OBJ_Signal_trait.first_signal)
DO while of <> 0
  m = @(of, OBJ_signal_trait_node.signal_trait_name, MEM_String)
  if OBJ_T_get$( @(of, OBJ_signal_trait_node.signal_name) ) = st then
    @debug_print "Emitting signal" + st
    'Found currect signal, loop through and call all connected functions
    off2 = @(of, OBJ_signal_trait_node.first_connection)
    DO WHILE off2 <> 0
      @call(_OFFSET, _OFFSET) @(off2, OBJ_signal_trait_connection_node.notify_proc, @PROC), this, @(off2, OBJ_signal_trait_connection_node.dat)
      off2 = @(off2, OBJ_signal_trait_connection_node.next_connection, @PROC)
    loop 
    goto clear_refs
  end if
  of = @(of, OBJ_signal_trait_node.next_signal)
LOOP 

clear_refs:
OBJ_ref_Object_release_ref n
$CHECKING:ON
END SUB 

