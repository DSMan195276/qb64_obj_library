
!!include once

FUNCTION OBJ_TEXT_get_type& ()
  STATIC added
  if added = 0 then
    DIM i as OBJ_type_info
    i.base_size= LEN(OBJ_TEXT, TYPE)
    i.class_size = LEN(OBJ_TEXT_class, TYPE)
    i.init = @SUB(OBJ_TEXT_init)
    i.class_init = @SUB(OBJ_TEXT_class_init)
    i.destroy = @SUB(OBJ_TEXT_destroy)
    i.parent = OBJ_ref_Object_get_type&
    added = OBJ_type_register_type&(i)
  end if
  OBJ_TEXT_get_type& = added
END FUNCTION 

FUNCTION OBJ_T%&(n$) 
DIM this as _OFFSET
this = OBJ_TEXT_new%&
OBJ_T_set this, n$
OBJ_T%& = this
END FUNCTION 

FUNCTION OBJ_TEXT_new%& () 
OBJ_TEXT_new%& = OBJ_type_allocate_new%&(OBJ_TEXT_get_type&)
END FUNCTION 

SUB OBJ_TEXT_init (this as _OFFSET) 

END SUB 

SUB OBJ_TEXT_class_init (class as _OFFSET) 

END SUB 

SUB OBJ_TEXT_destroy (this as _OFFSET) 
MEM_FREE @(this, OBJ_TEXT.s)
END SUB 

SUB OBJ_T_set (this as _OFFSET, n$) 
DIM l as LONG
l = LEN(n$)
@(this, OBJ_TEXT.length) = l AS LONG
if @(this, OBJ_TEXT.allocated) < l then
  MEM_FREE @(this, OBJ_TEXT.s)
  @(this, OBJ_TEXT.s) = MEM_MALLOC0%&(l + 10)
  @(this, OBJ_TEXT.allocated) = 1
end if
MEM_MEMCPY @(this, OBJ_TEXT.s), _OFFSET(n$), l
END SUB 

FUNCTION OBJ_T_get$ (this as _OFFSET) 
s$ = SPACE$(@(this, OBJ_TEXT.length))
MEM_MEMCPY _OFFSET(s$), @(this, OBJ_TEXT.s), @(this, OBJ_TEXT.length)
OBJ_T_get$ = s$
END FUNCTION 


