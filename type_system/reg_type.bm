
!!include once

FUNCTION OBJ_is_instance_of& (this as _OFFSET, t as LONG) 
  IF OBJ_type_list(t).flags AND (OBJ_TYPE_INFO_FLAG_IS_OBJECT OR OBJ_TYPE_INFO_FLAG_IS_ABSTRACT) then
    otype = @(this, OBJ_Object.otype)
    DO
      if otype = t then OBJ_is_instance_of& = -1: exit function
      otype = OBJ_type_list(otype).parent
    LOOP until otype = 0
  elseif OBJ_type_list(t).flags AND OBJ_TYPE_INFO_FLAG_IS_TRAIT then
    
  end if
END FUNCTION 

FUNCTION OBJ_type_register_type& (t as OBJ_type_info) 
  OBJ_type_count = OBJ_type_count + 1
  if OBJ_type_count > UBOUND(OBJ_type_list) then
    REDIM _PRESERVE OBJ_type_list(UBOUND(OBJ_type_list) + 100) AS OBJ_type_info
  end if

  OBJ_type_list(OBJ_type_count) = t
  OBJ_type_list(OBJ_type_count).vtable = MEM_MALLOC0%&(t.class_size)
  OBJ_type_list(OBJ_type_count).vtable_size = t.class_size

  if t.flags AND (OBJ_TYPE_INFO_FLAG_IS_ABSTRACT OR OBJ_TYPE_INFO_FLAG_IS_OBJECT) THEN
    if t.parent > 0 then
      MEM_MEMCPY OBJ_type_list(OBJ_type_count).vtable, OBJ_type_list(t.parent).vtable, OBJ_type_list(t.parent).class_size
      MEM_MEMMOVE OBJ_type_list(OBJ_type_count).vtable + OBJ_type_list(OBJ_type_count).class_size, OBJ_type_list(t.parent).vtable _
        + OBJ_type_list(t.parent).class_size, OBJ_type_list(t.parent).vtable_size - OBJ_type_list(t.parent).class_size
    end if
    @(OBJ_type_list(OBJ_type_count).vtable, OBJ_Object_class.otype) = OBJ_type_count
    @(OBJ_type_list(OBJ_type_count).vtable, OBJ_object_class.toff) = OBJ_type_list(OBJ_type_count).vtable + OBJ_type_list(OBJ_type_count).class_size
    if OBJ_type_list(OBJ_type_count).class_init <> OBJ_NULL then
      @call(_OFFSET) OBJ_type_list(OBJ_type_count).class_init, OBJ_type_list(OBJ_type_count).vtable
    end if
  elseif t.flags AND OBJ_TYPE_INFO_FLAG_IS_TRAIT then
    @(OBJ_type_list(OBJ_type_count).vtable, OBJ_trait_class.ttype) = OBJ_type_count
    @call(_OFFSET) OBJ_type_list(OBJ_type_count).class_init, OBJ_type_list(OBJ_type_count).vtable
  end if

  OBJ_type_register_type& = OBJ_type_count
END FUNCTION 

FUNCTION OBJ_type_allocate_new%& (t as LONG) 
  DIM parent_list(OBJ_TYPE_PARENT_MAX) AS LONG, s_count AS LONG
  DIM this AS _OFFSET, class AS _OFFSET
  if (OBJ_type_list(t).flags AND OBJ_TYPE_INFO_FLAG_ABSTRACT) = 0 then
    this = MEM_MALLOC0%&(OBJ_type_list(t).base_size)
    class = OBJ_type_list(t).class_copy
    
    @(this, OBJ_Object.vtable) = class
    
    'Find and call constructors, starting from base and going up.
    tn = t
    s_count = 1
    parent_list(s_count) = tn
    DO WHILE OBJ_type_list(tn).parent <> 0
      s_count = s_count + 1
      parent_list(s_count) = OBJ_type_list(tn).parent 
      tn = OBJ_type_list(tn).parent 
    loop
    FOR x = s_count to 1 STEP -1
      if OBJ_type_list(tn).init <> 0 then 
        @CALL(_OFFSET) OBJ_type_list(tn).init, this
      end if
    NEXT x
    OBJ_type_allocate_new%& = this
  else
    @debug_print "Error: Can not instantiate type, abstract"
    OBJ_type_allocate_new%& = OBJ_NULL
  end if
END FUNCTION 

FUNCTION OBJ_type_new_trait_list%& (n as LONG) 
  OBJ_type_new_trait_list%& = MEM_MALLOC0%&(n * 4 + 4)
END FUNCTION 

FUNCTION OBJ_type_add_trait%& (list AS _OFFSET, t as LONG) 
  DIM n as LONG
  n = @(list, LONG)
  @(list + 4 * t + 4, LONG) = t
  @(list, LONG) = n + 1
  OBJ_type_add_trait%& = list
END FUNCTION 

FUNCTION OBJ_type_get_class%& (t as LONG) 
  OBJ_type_get_class%& = OBJ_type_list(t).class_copy
END FUNCTION 

FUNCTION OBJ_type_get_parent_class%& (t as LONG) 
  OBJ_type_get_parent_class%& = OBJ_type_list(OBJ_type_list(t).parent).class_copy
END FUNCTION 

FUNCTION OBJ_Object_cast_as_type%& (this as _OFFSET, t as LONG) 

END FUNCTION 

FUNCTION OBJ_Object_get_type& () 
  STATIC otype AS LONG, t as OBJ_type_info
  if otype = 0 then
    t.base_size = LEN(OBJ_Object, TYPE)
    t.class_size = LEN(OBJ_Object_class, TYPE)
    t.init = 0
    t.destroy = 0
    t.parent = 0 'We're just cool like that
    t.flags = OBJ_TYPE_INFO_FLAG_ABSTRACT
    otype = OBJ_type_register_type&(t)
  end if
  OBJ_Object_get_type& = otype
END FUNCTION 

FUNCTION OBJ_Object_get_class%& (this as _OFFSET) 
  OBJ_Object_get_class%& = @(this, OBJ_Object.vtable, _OFFSET)
END FUNCTION 

FUNCTION OBJ_Object_get_parent_class%& (this as _OFFSET) 
  OBJ_Object_get_parent_class%& = OBJ_type_list(OBJ_type_list(@(this, OBJ_Object.otype)).parent).class_copy
END FUNCTION 

FUNCTION OBJ_Class_get_type& (class as _OFFSET) 
  OBJ_Class_get_type& = @(class, OBJ_Object_class.otype)
END FUNCTION 

SUB OBJ_Object_destroy (this as _OFFSET)
  otype = @(this, OBJ_Object.otype)
  tn = otype
  DO
    if OBJ_type_list(tn).destroy then
      @CALL(_OFFSET) OBJ_type_list(tn).destroy, this
    end if
    tn = OBJ_type_list(tn).parent 
  LOOP Until tn = 0
  MEM_FREE this
END SUB 

